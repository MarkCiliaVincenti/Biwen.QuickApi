{
  "conceptual": "\n<p sourcefile=\"index.md\" sourcestartlinenumber=\"10\"><img src=\"https://img.shields.io/nuget/v/Biwen.QuickApi\" sourcefile=\"index.md\" sourcestartlinenumber=\"10\" alt=\"Nuget\">\n<img src=\"https://img.shields.io/nuget/dt/Biwen.QuickApi\" sourcefile=\"index.md\" sourcestartlinenumber=\"11\" alt=\"Nuget\">\n<a href=\"https://github.com/vipwan/Biwen.QuickApi/blob/master/LICENSE.txt\" sourcefile=\"index.md\" sourcestartlinenumber=\"12\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" sourcefile=\"index.md\" sourcestartlinenumber=\"12\" alt=\"GitHub license\"></a>\n<a href=\"https://github.com/vipwan/Biwen.QuickApi/pulls\" sourcefile=\"index.md\" sourcestartlinenumber=\"13\"><img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\" sourcefile=\"index.md\" sourcestartlinenumber=\"13\" alt=\"PRs Welcome\"></a></p>\n<h2 id=\"项目介绍\" sourcefile=\"index.md\" sourcestartlinenumber=\"15\">项目介绍</h2>\n<p sourcefile=\"index.md\" sourcestartlinenumber=\"16\">Biwen.QuickApi 2+,是一个微型<code sourcefile=\"index.md\" sourcestartlinenumber=\"16\">aspnetcore</code>开发框架,提供minimalapi的QuickApi封装,提供<code sourcefile=\"index.md\" sourcestartlinenumber=\"16\">IQuickEndpoint</code>书写minimalapi,\n模块化支持<code sourcefile=\"index.md\" sourcestartlinenumber=\"17\">Modular</code>,发布订阅:<code sourcefile=\"index.md\" sourcestartlinenumber=\"17\">IEvent</code>,作业调度:<code sourcefile=\"index.md\" sourcestartlinenumber=\"17\">IScheduleTask</code>,LocalLock,OpenApi ~~</p>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"19\">public class MyStore\n{\n    public static Todo[] SampleTodos()\n    {\n        return [\n            new(1, &quot;Walk the dog&quot;),\n            new(2, &quot;Do the dishes&quot;, DateOnly.FromDateTime(DateTime.Now)),\n            ];\n    }\n}\n\n[QuickApi(&quot;todos&quot;)] //返回对象方式\npublic class TodoApi : BaseQuickApi&lt;EmptyRequest,Todo[]&gt;\n{\n    public override async ValueTask&lt;Todo[]&gt; ExecuteAsync(EmptyRequest request)\n    {\n        await Task.CompletedTask;\n        return MyStore.SampleTodos();\n    }\n}\n</code></pre>\n<ul sourcefile=\"index.md\" sourcestartlinenumber=\"41\">\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"41\">(MinimalApi as REPR) Biwen.QuickApi遵循了 REPR 设计 （Request-Endpoint-Response）</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"42\">开箱即用</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"43\">write less, do more ; write anywhere, do anything</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"44\">欢迎小伙伴们star&amp;issue共同学习进步 <a href=\"https://github.com/vipwan/Biwen.QuickApi\" sourcefile=\"index.md\" sourcestartlinenumber=\"44\">Biwen.QuickApi</a></li>\n</ul>\n<h2 id=\"开发工具\" sourcefile=\"index.md\" sourcestartlinenumber=\"46\">开发工具</h2>\n<ul sourcefile=\"index.md\" sourcestartlinenumber=\"48\">\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"48\"><a href=\"https://learn.microsoft.com/zh-cn/visualstudio/releases/2022/release-notes-preview\" sourcefile=\"index.md\" sourcestartlinenumber=\"48\">Visual Studio 2022 17.10.0 +</a></li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"49\"><a href=\"https://dotnet.microsoft.com/zh-cn/download/dotnet/9.0\" sourcefile=\"index.md\" sourcestartlinenumber=\"49\">Net 9.0.0</a></li>\n</ul>\n<h2 id=\"依赖环境库\" sourcefile=\"index.md\" sourcestartlinenumber=\"51\">依赖环境&amp;库</h2>\n<ul sourcefile=\"index.md\" sourcestartlinenumber=\"53\">\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"53\">Microsoft.AspNetCore.App</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"54\"><a href=\"https://www.nuget.org/packages/FluentValidation.AspNetCore/11.3.0\" sourcefile=\"index.md\" sourcestartlinenumber=\"54\">FluentValidation.AspNetCore</a></li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"55\"><a href=\"https://www.nuget.org/packages/Microsoft.AspNetCore.OpenApi/8.0.5\" sourcefile=\"index.md\" sourcestartlinenumber=\"55\">Microsoft.AspNetCore.OpenApi</a></li>\n</ul>\n<h2 id=\"使用方式\" sourcefile=\"index.md\" sourcestartlinenumber=\"57\">使用方式</h2>\n<h3 id=\"step0-nuget\" sourcefile=\"index.md\" sourcestartlinenumber=\"59\">Step0 Nuget</h3>\n<pre><code class=\"lang-bash\" sourcefile=\"index.md\" sourcestartlinenumber=\"61\">dotnet add package Biwen.QuickApi\n</code></pre>\n<h3 id=\"step1-usebiwenquickapis\" sourcefile=\"index.md\" sourcestartlinenumber=\"64\">Step1 UseBiwenQuickApis</h3>\n<h4 id=\"biwenquickapioptions配置项\" sourcefile=\"index.md\" sourcestartlinenumber=\"66\">BiwenQuickApiOptions配置项:</h4>\n<ul sourcefile=\"index.md\" sourcestartlinenumber=\"67\">\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"67\"><code sourcefile=\"index.md\" sourcestartlinenumber=\"67\">RoutePrefix</code>:前缀,默认:api,</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"68\"><code sourcefile=\"index.md\" sourcestartlinenumber=\"68\">EnableAntiForgeryTokens</code>:是否启用防伪,默认:true,</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"69\"><code sourcefile=\"index.md\" sourcestartlinenumber=\"69\">EnablePubSub</code>:是否启用发布订阅,默认:true,<a href=\"https://github.com/vipwan/Biwen.QuickApi/issues/17\" sourcefile=\"index.md\" sourcestartlinenumber=\"69\">#17</a></li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"70\"><code sourcefile=\"index.md\" sourcestartlinenumber=\"70\">EnableScheduling</code>:是否启用调度,默认:true,<a href=\"https://github.com/vipwan/Biwen.QuickApi/issues/18\" sourcefile=\"index.md\" sourcestartlinenumber=\"70\">#18</a></li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"71\"><code sourcefile=\"index.md\" sourcestartlinenumber=\"71\">UseQuickApiExceptionResultBuilder</code>:是否启用QuickApi的规范化异常处理,默认:false,(true将返回详细的异常信息到前端.一般仅调试模式开启)</li>\n</ul>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"73\">services.AddBiwenQuickApis(Action&lt;BiwenQuickApiOptions&gt;? options);//add services\napp.UseBiwenQuickApis();//use middleware\n</code></pre>\n<h3 id=\"step2-define-request-and-response\" sourcefile=\"index.md\" sourcestartlinenumber=\"78\">Step2 Define Request and Response</h3>\n<ul sourcefile=\"index.md\" sourcestartlinenumber=\"80\">\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"80\">推荐Biwen.AutoClassGen(已内置)生成Partial Request &amp; DTO对象 <a href=\"https://github.com/vipwan/Biwen.QuickApi/blob/master/Biwen.QuickApi.DemoWeb/Apis/AutoClassGenApi.cs\" sourcefile=\"index.md\" sourcestartlinenumber=\"80\">参考代码</a></li>\n</ul>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"82\">\npublic class HelloApiRequest : BaseRequest&lt;HelloApiRequest&gt;\n{\n    [Description(&quot;Name Desc&quot;)]\n    public string? Name { get; set; }\n\n    /// &lt;summary&gt;\n    /// FromQuery特性绑定字段\n    /// &lt;/summary&gt;\n    [FromQuery(&quot;q&quot;)]\n    public string? Q { get; set; }\n    public HelloApiRequest()\n    {\n        RuleFor(x =&gt; x.Name).NotNull().Length(5, 10);\n    }\n}\n    \n/// &lt;summary&gt;\n/// 上传文件FileUploadRequest \n/// &lt;/summary&gt;\npublic class FileUploadRequest : BaseRequest&lt;FileUploadRequest&gt;\n{\n    public IFormFile? File { get; set; }\n\n    public FileUploadRequest()\n    {\n        RuleFor(x =&gt; x.File).NotNull();\n    }\n}\n\n/// &lt;summary&gt;\n/// 模拟自定义绑定的Request\n/// &lt;/summary&gt;\npublic class CustomApiRequest : BaseRequest&lt;CustomApiRequest&gt;\n{\n    public string? Name { get; set; }\n\n    public CustomApiRequest()\n    {\n        RuleFor(x =&gt; x.Name).NotNull().Length(5, 10);\n    }\n}\n/// &lt;summary&gt;\n/// 标记FromBody,表示这个请求对象是FromBody的\n/// &lt;/summary&gt;\n[FromBody]\npublic class FromBodyRequest : BaseRequest&lt;FromBodyRequest&gt;\n{\n    public int Id { get; set; }\n    public string? Name { get; set; }\n\n    public FromBodyRequest()\n    {\n        RuleFor(x =&gt; x.Id).InclusiveBetween(1, 100);//必须1~100\n    }\n}\n/// &lt;summary&gt;\n/// 自定义的绑定器\n/// &lt;/summary&gt;\npublic class CustomApiRequestBinder : IReqBinder&lt;CustomApiRequest&gt;\n{\n    public static async ValueTask&lt;CustomApiRequest&gt; BindAsync(HttpContext context,ParameterInfo parameter = null)\n    {\n        var request = new CustomApiRequest\n        {\n            Name = context.Request.Query[&quot;c&quot;]\n        };\n        await Task.CompletedTask;\n        return request;\n    }\n}\n\npublic class HelloApiResponse\n{\n    public string? Message { get; set; }\n}\n\n</code></pre>\n<h3 id=\"step3-define-quickapi\" sourcefile=\"index.md\" sourcestartlinenumber=\"162\">Step3 Define QuickApi</h3>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"164\">\n/// &lt;summary&gt;\n/// get ~/admin/index\n/// &lt;/summary&gt;\n[QuickApi(&quot;index&quot;, Group = &quot;admin&quot;, Verbs = Verb.GET | Verb.POST, Policy = &quot;admin&quot;)]\n[QuickApiSummary(&quot;this is summary&quot;,&quot;this is description&quot;)]\npublic class NeedAuthApi : BaseQuickApi\n{\n    public override IResult Execute(EmptyRequest request)\n    {\n        return Results.Ok();\n    }\n}\n\n/// &lt;summary&gt;\n/// get ~/hello/world/{name}\n/// &lt;/summary&gt;\n[QuickApi(&quot;world/{name}&quot;, Group = &quot;hello&quot;, Verbs = Verb.GET | Verb.POST)]\npublic class HelloApi : BaseQuickApi&lt;HelloApiRequest, HelloApiResponse&gt;\n{\n    private readonly HelloService _service;\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public HelloApi(HelloService service,IHttpContextAccessor httpContextAccessor)\n    {\n        _service = service;\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    public override HelloApiResponse Execute(HelloApiRequest request)\n    {\n        var hello = _service.Hello($&quot;hello world {_httpContextAccessor.HttpContext!.Request.Path} !&quot;);\n        return new HelloApiResponse{ Message = hello };\n    }\n}\n\n/// &lt;summary&gt;\n/// get ~/custom?c=11112222\n/// &lt;/summary&gt;\n[QuickApi(&quot;custom&quot;, Verbs = Verb.GET)]\npublic class CustomApi : BaseQuickApi&lt;CustomApiRequest&gt;\n{\n    public CustomApi()\n    {\n        //自定义绑定器\n        UseReqBinder&lt;CustomApiRequestBinder&gt;();\n    }\n\n    public override async ValueTask&lt;IResult&gt; ExecuteAsync(CustomApiRequest request)\n    {\n        await Task.CompletedTask;\n        Console.WriteLine($&quot;获取自定义的 CustomApi:,从querystring:c绑定,{request.Name}&quot;);\n        return Results.Ok();\n    }\n\n    /// &lt;summary&gt;\n    /// 提供minimal扩展\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;builder&quot;&gt;&lt;/param&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public override RouteHandlerBuilder HandlerBuilder(RouteHandlerBuilder builder)\n    {\n        //自定义描述\n        builder.WithOpenApi(operation =&gt; new(operation)\n        {\n            Summary = &quot;This is a summary&quot;,\n            Description = &quot;This is a description&quot;\n        });\n\n        //自定义标签\n        builder.WithTags(&quot;custom&quot;);\n\n        //自定义过滤器\n        builder.AddEndpointFilter(async (context, next) =&gt;\n        {\n            Console.WriteLine(&quot;自定义过滤器!&quot;);\n            return await next(context);\n        });\n        //默认实现了Accepts和Produces\n        return base.HandlerBuilder(builder);\n        //如果完全自定义直接返回Builder\n        //return builder;\n        }\n}\n    \n/// &lt;summary&gt;\n/// 上传文件测试\n/// 请使用postman &amp; apifox 测试\n/// &lt;/summary&gt;\n[QuickApi(&quot;fromfile&quot;, Verbs = Verb.POST)]\n[QuickApiSummary(&quot;上传文件测试&quot;, &quot;上传文件测试&quot;)]\npublic class FromFileApi : BaseQuickApi&lt;FileUploadRequest, Results&lt;Ok&lt;string&gt;,BadRequest&lt;string&gt;&gt;&gt;\n{\n    public override async ValueTask&lt;Results&lt;Ok&lt;string&gt;,BadRequest&lt;string&gt;&gt; ExecuteAsync(FileUploadRequest request)\n    {\n        //测试上传一个文本文件并读取内容\n        if (request.File != null)\n        {\n            using (var sr = new StreamReader(request.File.OpenReadStream()))\n            {\n                var content = await sr.ReadToEndAsync();\n                return TypedResults.Ok(content);\n            }\n        }\n        return TypedResults.BadRequest(&quot;no file&quot;);\n    }\n}\n\n/// &lt;summary&gt;\n/// JustAsService 只会被服务发现，不会被注册到路由表\n/// &lt;/summary&gt;\n[QuickApi(&quot;&quot;), JustAsService]\npublic class JustAsService : BaseQuickApi&lt;EmptyRequest, string&gt;\n{\n    public override async ValueTask&lt;string&gt; ExecuteAsync(EmptyRequest request)\n    {\n        return &quot;Hello World JustAsService!&quot;;\n    }\n}\n</code></pre>\n<h3 id=\"提供quickapi的group扩展支持\" sourcefile=\"index.md\" sourcestartlinenumber=\"286\">提供QuickApi的Group扩展支持</h3>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"288\">\n   // 当前模拟给所有 Group为空的QuickApi加上 Tag &quot;Def&quot; \n    public class MyGroupRouteBuilder : IQuickApiGroupRouteBuilder\n    {\n        // 表述Group为空的QuickApi\n        public string Group =&gt; string.Empty;\n        // 执行顺序\n        public int Order =&gt; 1;\n        // 实现Builder方法\n        public RouteGroupBuilder Builder(RouteGroupBuilder routeBuilder)\n        {\n            // 给所有 Group为空的QuickApi加上 Tag &quot;Def&quot;\n            routeBuilder.WithTags(&quot;Def&quot;);\n            return routeBuilder;\n        }\n    }\n\n// 最后注册\nbuilder.Services.AddBiwenQuickApiGroupRouteBuilder&lt;MyGroupRouteBuilder&gt;();\n\n</code></pre>\n<h3 id=\"step4-enjoy\" sourcefile=\"index.md\" sourcestartlinenumber=\"311\">Step4 Enjoy</h3>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"313\">\n//直接访问\n// GET ~/hello/world/biwen\n// GET ~/hello/world/biwen?name=biwen\n// POST ~/hello/world/biwen\n// GET ~/custom?c=11112222\n\n</code></pre>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"323\">\n//你也可以把QuickApi当Service使用\napp.MapGet(&quot;/fromapi&quot;, async (Apis.Hello4Api api) =&gt;\n{\n    //通过你的方式获取请求对象\n    var req = new EmptyRequest();\n    //验证请求对象\n    var result = req.RealValidator.Validate(req);\n    if (!result.IsValid)\n    {\n        return Results.BadRequest(result.ToDictionary());\n    }\n    //执行请求\n    var x = await api.ExecuteAsync(new EmptyRequest());\n    return Results.Ok(x);\n});\n\n</code></pre>\n<h3 id=\"step5-openapi集成\" sourcefile=\"index.md\" sourcestartlinenumber=\"343\">Step5 OpenApi集成</h3>\n<pre><code class=\"lang-c#\" sourcefile=\"index.md\" sourcestartlinenumber=\"345\">\n//register openapi &amp; quickapi document\nbuilder.Services.AddOpenApi(options =&gt;\n{\n    options.UseTransformer&lt;BearerSecuritySchemeTransformer&gt;();\n    options.ShouldInclude = (desc) =&gt; true;\n});\n\n//more doc group...\n\n//map openapi doc &amp; ui\napp.MapGroup(&quot;openapi&quot;, app =&gt;\n{\n    //swagger ui\n    app.MapOpenApi(&quot;{documentName}.json&quot;);\n    app.MapScalarUi();\n});\n</code></pre>\n<h3 id=\"step6-openapi-以及client代理\" sourcefile=\"index.md\" sourcestartlinenumber=\"364\">Step6 OpenApi 以及Client代理</h3>\n<ul sourcefile=\"index.md\" sourcestartlinenumber=\"366\">\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"366\">你可以全局配置版本号,以及自定义的OpenApi描述</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"367\">你可以重写QuickApi的HandlerBuilder方法,以便于你自定义的OpenApi描述</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"368\">我们强烈建议您使用<code sourcefile=\"index.md\" sourcestartlinenumber=\"368\">Kiota</code>,<code sourcefile=\"index.md\" sourcestartlinenumber=\"368\">Refit</code>生成代理代码,以便于您的客户端和服务端保持一致的接口定义</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"369\">因为遵循REPR风格,所以不推荐SwaggerUI或使用SwaggerStudio生成代理代码,除非您的QuickApi定义的相当规范(如存在自定义绑定,别名绑定等)!</li>\n</ul>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"371\">\n/// &lt;summary&gt;\n/// refit client\n/// &lt;/summary&gt;\npublic interface IBusiness\n{\n    [Refit.Get(&quot;/fromapi&quot;)]\n    public Task&lt;TestRsp&gt; TestPost();\n}\n\n//Refit\nbuilder.Services.AddRefitClient&lt;IBusiness&gt;()\n    .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(&quot;http://localhost:5101&quot;));\n\nvar app = builder.Build();\n\napp.MapGet(&quot;/from-quickapi&quot;, async (IBusiness bussiness) =&gt;\n{\n    var resp = await bussiness.TestPost();\n    return Results.Content(resp.Message);\n});\n\n</code></pre>\n<h3 id=\"benchmark性能测试\" sourcefile=\"index.md\" sourcestartlinenumber=\"396\">Benchmark性能测试</h3>\n<pre><code class=\"lang-txt\" sourcefile=\"index.md\" sourcestartlinenumber=\"398\">BenchmarkDotNet v0.13.12, Windows 10 (10.0.19045.3570/22H2/2022Update)\n11th Gen Intel Core i7-11800H 2.30GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK 8.0.100\n[Host]     : .NET 8.0.0 (8.0.0.100), X64 RyuJIT AVX2 [AttachedDebugger]\nJob-WHDDIT : .NET 8.0.0 (8.0.0.100), X64 RyuJIT AVX2\n\nRuntime=.NET 8.0  InvocationCount=2000  IterationCount=10  \nLaunchCount=1  WarmupCount=1  \n\n</code></pre>\n<table sourcefile=\"index.md\" sourcestartlinenumber=\"410\">\n<thead>\n<tr sourcefile=\"index.md\" sourcestartlinenumber=\"410\">\n<th sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Method</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Mean</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Error</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">StdDev</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Median</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Ratio</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">RatioSD</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Gen0</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Allocated</th>\n<th style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"410\">Alloc Ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr sourcefile=\"index.md\" sourcestartlinenumber=\"412\">\n<td sourcefile=\"index.md\" sourcestartlinenumber=\"412\">WebApiCtrl</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">385.5 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">357.93 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">236.75 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">231.0 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">1.00</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">0.00</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">2.5000</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">33.5 KB</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"412\">1.00</td>\n</tr>\n<tr sourcefile=\"index.md\" sourcestartlinenumber=\"413\">\n<td sourcefile=\"index.md\" sourcestartlinenumber=\"413\">MinimalApi</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">221.2 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">13.02 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">6.81 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">220.9 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">0.68</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">0.34</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">2.0000</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">24.38 KB</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"413\">0.73</td>\n</tr>\n<tr sourcefile=\"index.md\" sourcestartlinenumber=\"414\">\n<td sourcefile=\"index.md\" sourcestartlinenumber=\"414\">QuickApi</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">235.9 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">22.26 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">11.65 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">235.4 μs</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">0.72</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">0.34</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">2.0000</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">27.59 KB</td>\n<td style=\"text-align: right;\" sourcefile=\"index.md\" sourcestartlinenumber=\"414\">0.82</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"qa\" sourcefile=\"index.md\" sourcestartlinenumber=\"416\">Q&amp;A</h3>\n<ul sourcefile=\"index.md\" sourcestartlinenumber=\"418\">\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"418\"><p sourcefile=\"index.md\" sourcestartlinenumber=\"418\">为什么不支持多个参数的绑定?\n-- 因为我认为这样的Api设计是不合理的,我们遵循REPR设计理念,如果你需要多个参数,请使用复杂化的Request对象</p>\n</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"421\"><p sourcefile=\"index.md\" sourcestartlinenumber=\"421\">QuickApi中如何拿到HttpContext对象?\n-- 请在构造函数中注入IHttpContextAccessor获取</p>\n</li>\n<li sourcefile=\"index.md\" sourcestartlinenumber=\"424\"><p sourcefile=\"index.md\" sourcestartlinenumber=\"424\">是否支持Minimal的中间件和拦截器?\n-- 支持的,本身QuickApi就是扩展了MinimalApi,底层也是Minimal的处理机制,所以请考虑全局的中间件和拦截器,以及重写QuickApi的HandlerBuilder方法\n-- 如果你仅仅需要使用中间件控制QuickApi的行为可以参考下面的代码:</p>\n</li>\n</ul>\n<pre><code class=\"lang-csharp\" sourcefile=\"index.md\" sourcestartlinenumber=\"428\">var md = context.GetEndpoint()?.Metadata.GetMetadata&lt;QuickApiMetadata&gt;();\nif (md == null || md.QuickApiType == null)\n{\n    await _next(context);\n    return;\n}\n\n//todo:\n\n</code></pre>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "Biwen.QuickApi.DocSite/seed/index.md",
      "branch": "net9",
      "repo": "https://github.com/vipwan/Biwen.QuickApi.git"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "path": "index.md",
  "documentation": {
    "remote": {
      "path": "Biwen.QuickApi.DocSite/seed/index.md",
      "branch": "net9",
      "repo": "https://github.com/vipwan/Biwen.QuickApi.git"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "_appName": "Biwen.QuickApi",
  "_appTitle": "Biwen.QuickApi 2.0",
  "_enableSearch": true,
  "pdf": true,
  "pdfTocPage": true,
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"biwenquickapi\" sourcefile=\"index.md\" sourcestartlinenumber=\"8\">Biwen.QuickApi</h1>",
  "_appLogoUrl": "https://github.com/vipwan/Biwen.QuickApi",
  "_disableNewTab": true,
  "_lang": "zh-CN",
  "_layout": "landing",
  "title": "Biwen.QuickApi",
  "wordCount": 882.0,
  "_key": "index.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "toc.html",
  "_path": "index.html",
  "_rel": "",
  "_tocKey": "~/toc.yml",
  "_tocPath": "toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "todo": "MY TODO",
    "_shared": {}
  },
  "_disableToc": true,
  "docurl": "https://github.com/vipwan/Biwen.QuickApi/blob/net9/Biwen.QuickApi.DocSite/seed/index.md/#L1"
}